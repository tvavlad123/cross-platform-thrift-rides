/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Service
{
  public partial class ITransportObserver {
    public interface Iface {
      void updateRides(List<Domain.Ride> rides);
      #if SILVERLIGHT
      IAsyncResult Begin_updateRides(AsyncCallback callback, object state, List<Domain.Ride> rides);
      void End_updateRides(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_updateRides(AsyncCallback callback, object state, List<Domain.Ride> rides)
      {
        return send_updateRides(callback, state, rides);
      }

      public void End_updateRides(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
      }

      #endif

      public void updateRides(List<Domain.Ride> rides)
      {
        #if !SILVERLIGHT
        send_updateRides(rides);

        #else
        var asyncResult = Begin_updateRides(null, null, rides);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_updateRides(AsyncCallback callback, object state, List<Domain.Ride> rides)
      #else
      public void send_updateRides(List<Domain.Ride> rides)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("updateRides", TMessageType.Oneway, seqid_));
        updateRides_args args = new updateRides_args();
        args.Rides = rides;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["updateRides"] = updateRides_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void updateRides_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateRides_args args = new updateRides_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        iface_.updateRides(args.Rides);
        return;
      }
    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateRides_args : TBase
    {
      private List<Domain.Ride> _rides;

      public List<Domain.Ride> Rides
      {
        get
        {
          return _rides;
        }
        set
        {
          __isset.rides = true;
          this._rides = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool rides;
      }

      public updateRides_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.List) {
                  {
                    Rides = new List<Domain.Ride>();
                    TList _list0 = iprot.ReadListBegin();
                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                    {
                      Domain.Ride _elem2;
                      _elem2 = new Domain.Ride();
                      _elem2.Read(iprot);
                      Rides.Add(_elem2);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateRides_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Rides != null && __isset.rides) {
            field.Name = "rides";
            field.Type = TType.List;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Rides.Count));
              foreach (Domain.Ride _iter3 in Rides)
              {
                _iter3.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateRides_args(");
        bool __first = true;
        if (Rides != null && __isset.rides) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Rides: ");
          __sb.Append(Rides);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
