/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Service
{
  public partial class ITransportServer {
    public interface Iface {
      bool login(Domain.Employee employee, Domain.EndPoint endpoint);
      #if SILVERLIGHT
      IAsyncResult Begin_login(AsyncCallback callback, object state, Domain.Employee employee, Domain.EndPoint endpoint);
      bool End_login(IAsyncResult asyncResult);
      #endif
      List<Domain.Ride> getAllRides();
      #if SILVERLIGHT
      IAsyncResult Begin_getAllRides(AsyncCallback callback, object state);
      List<Domain.Ride> End_getAllRides(IAsyncResult asyncResult);
      #endif
      List<Domain.Ride> getCustomRides(string destination, string date, string hour);
      #if SILVERLIGHT
      IAsyncResult Begin_getCustomRides(AsyncCallback callback, object state, string destination, string date, string hour);
      List<Domain.Ride> End_getCustomRides(IAsyncResult asyncResult);
      #endif
      List<Domain.Person> getAllPersons();
      #if SILVERLIGHT
      IAsyncResult Begin_getAllPersons(AsyncCallback callback, object state);
      List<Domain.Person> End_getAllPersons(IAsyncResult asyncResult);
      #endif
      List<Domain.Ride> addBooking(Domain.Ride ride, Domain.Booking booking, Domain.Employee employee, Domain.Person person);
      #if SILVERLIGHT
      IAsyncResult Begin_addBooking(AsyncCallback callback, object state, Domain.Ride ride, Domain.Booking booking, Domain.Employee employee, Domain.Person person);
      List<Domain.Ride> End_addBooking(IAsyncResult asyncResult);
      #endif
      void logout(Domain.Employee employee);
      #if SILVERLIGHT
      IAsyncResult Begin_logout(AsyncCallback callback, object state, Domain.Employee employee);
      void End_logout(IAsyncResult asyncResult);
      #endif
      List<Domain.Booking> getAllBookings();
      #if SILVERLIGHT
      IAsyncResult Begin_getAllBookings(AsyncCallback callback, object state);
      List<Domain.Booking> End_getAllBookings(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_login(AsyncCallback callback, object state, Domain.Employee employee, Domain.EndPoint endpoint)
      {
        return send_login(callback, state, employee, endpoint);
      }

      public bool End_login(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_login();
      }

      #endif

      public bool login(Domain.Employee employee, Domain.EndPoint endpoint)
      {
        #if !SILVERLIGHT
        send_login(employee, endpoint);
        return recv_login();

        #else
        var asyncResult = Begin_login(null, null, employee, endpoint);
        return End_login(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_login(AsyncCallback callback, object state, Domain.Employee employee, Domain.EndPoint endpoint)
      #else
      public void send_login(Domain.Employee employee, Domain.EndPoint endpoint)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("login", TMessageType.Call, seqid_));
        login_args args = new login_args();
        args.Employee = employee;
        args.Endpoint = endpoint;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_login()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        login_result result = new login_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "login failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getAllRides(AsyncCallback callback, object state)
      {
        return send_getAllRides(callback, state);
      }

      public List<Domain.Ride> End_getAllRides(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getAllRides();
      }

      #endif

      public List<Domain.Ride> getAllRides()
      {
        #if !SILVERLIGHT
        send_getAllRides();
        return recv_getAllRides();

        #else
        var asyncResult = Begin_getAllRides(null, null);
        return End_getAllRides(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getAllRides(AsyncCallback callback, object state)
      #else
      public void send_getAllRides()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getAllRides", TMessageType.Call, seqid_));
        getAllRides_args args = new getAllRides_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Domain.Ride> recv_getAllRides()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getAllRides_result result = new getAllRides_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAllRides failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getCustomRides(AsyncCallback callback, object state, string destination, string date, string hour)
      {
        return send_getCustomRides(callback, state, destination, date, hour);
      }

      public List<Domain.Ride> End_getCustomRides(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getCustomRides();
      }

      #endif

      public List<Domain.Ride> getCustomRides(string destination, string date, string hour)
      {
        #if !SILVERLIGHT
        send_getCustomRides(destination, date, hour);
        return recv_getCustomRides();

        #else
        var asyncResult = Begin_getCustomRides(null, null, destination, date, hour);
        return End_getCustomRides(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getCustomRides(AsyncCallback callback, object state, string destination, string date, string hour)
      #else
      public void send_getCustomRides(string destination, string date, string hour)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getCustomRides", TMessageType.Call, seqid_));
        getCustomRides_args args = new getCustomRides_args();
        args.Destination = destination;
        args.Date = date;
        args.Hour = hour;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Domain.Ride> recv_getCustomRides()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getCustomRides_result result = new getCustomRides_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getCustomRides failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getAllPersons(AsyncCallback callback, object state)
      {
        return send_getAllPersons(callback, state);
      }

      public List<Domain.Person> End_getAllPersons(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getAllPersons();
      }

      #endif

      public List<Domain.Person> getAllPersons()
      {
        #if !SILVERLIGHT
        send_getAllPersons();
        return recv_getAllPersons();

        #else
        var asyncResult = Begin_getAllPersons(null, null);
        return End_getAllPersons(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getAllPersons(AsyncCallback callback, object state)
      #else
      public void send_getAllPersons()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getAllPersons", TMessageType.Call, seqid_));
        getAllPersons_args args = new getAllPersons_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Domain.Person> recv_getAllPersons()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getAllPersons_result result = new getAllPersons_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAllPersons failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_addBooking(AsyncCallback callback, object state, Domain.Ride ride, Domain.Booking booking, Domain.Employee employee, Domain.Person person)
      {
        return send_addBooking(callback, state, ride, booking, employee, person);
      }

      public List<Domain.Ride> End_addBooking(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_addBooking();
      }

      #endif

      public List<Domain.Ride> addBooking(Domain.Ride ride, Domain.Booking booking, Domain.Employee employee, Domain.Person person)
      {
        #if !SILVERLIGHT
        send_addBooking(ride, booking, employee, person);
        return recv_addBooking();

        #else
        var asyncResult = Begin_addBooking(null, null, ride, booking, employee, person);
        return End_addBooking(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_addBooking(AsyncCallback callback, object state, Domain.Ride ride, Domain.Booking booking, Domain.Employee employee, Domain.Person person)
      #else
      public void send_addBooking(Domain.Ride ride, Domain.Booking booking, Domain.Employee employee, Domain.Person person)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("addBooking", TMessageType.Call, seqid_));
        addBooking_args args = new addBooking_args();
        args.Ride = ride;
        args.Booking = booking;
        args.Employee = employee;
        args.Person = person;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Domain.Ride> recv_addBooking()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        addBooking_result result = new addBooking_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "addBooking failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_logout(AsyncCallback callback, object state, Domain.Employee employee)
      {
        return send_logout(callback, state, employee);
      }

      public void End_logout(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_logout();
      }

      #endif

      public void logout(Domain.Employee employee)
      {
        #if !SILVERLIGHT
        send_logout(employee);
        recv_logout();

        #else
        var asyncResult = Begin_logout(null, null, employee);
        End_logout(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_logout(AsyncCallback callback, object state, Domain.Employee employee)
      #else
      public void send_logout(Domain.Employee employee)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("logout", TMessageType.Call, seqid_));
        logout_args args = new logout_args();
        args.Employee = employee;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_logout()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        logout_result result = new logout_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getAllBookings(AsyncCallback callback, object state)
      {
        return send_getAllBookings(callback, state);
      }

      public List<Domain.Booking> End_getAllBookings(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getAllBookings();
      }

      #endif

      public List<Domain.Booking> getAllBookings()
      {
        #if !SILVERLIGHT
        send_getAllBookings();
        return recv_getAllBookings();

        #else
        var asyncResult = Begin_getAllBookings(null, null);
        return End_getAllBookings(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getAllBookings(AsyncCallback callback, object state)
      #else
      public void send_getAllBookings()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getAllBookings", TMessageType.Call, seqid_));
        getAllBookings_args args = new getAllBookings_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Domain.Booking> recv_getAllBookings()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getAllBookings_result result = new getAllBookings_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAllBookings failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["login"] = login_Process;
        processMap_["getAllRides"] = getAllRides_Process;
        processMap_["getCustomRides"] = getCustomRides_Process;
        processMap_["getAllPersons"] = getAllPersons_Process;
        processMap_["addBooking"] = addBooking_Process;
        processMap_["logout"] = logout_Process;
        processMap_["getAllBookings"] = getAllBookings_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void login_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        login_args args = new login_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        login_result result = new login_result();
        result.Success = iface_.login(args.Employee, args.Endpoint);
        oprot.WriteMessageBegin(new TMessage("login", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getAllRides_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getAllRides_args args = new getAllRides_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getAllRides_result result = new getAllRides_result();
        result.Success = iface_.getAllRides();
        oprot.WriteMessageBegin(new TMessage("getAllRides", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getCustomRides_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getCustomRides_args args = new getCustomRides_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getCustomRides_result result = new getCustomRides_result();
        result.Success = iface_.getCustomRides(args.Destination, args.Date, args.Hour);
        oprot.WriteMessageBegin(new TMessage("getCustomRides", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getAllPersons_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getAllPersons_args args = new getAllPersons_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getAllPersons_result result = new getAllPersons_result();
        result.Success = iface_.getAllPersons();
        oprot.WriteMessageBegin(new TMessage("getAllPersons", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void addBooking_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        addBooking_args args = new addBooking_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        addBooking_result result = new addBooking_result();
        result.Success = iface_.addBooking(args.Ride, args.Booking, args.Employee, args.Person);
        oprot.WriteMessageBegin(new TMessage("addBooking", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void logout_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        logout_args args = new logout_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        logout_result result = new logout_result();
        iface_.logout(args.Employee);
        oprot.WriteMessageBegin(new TMessage("logout", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getAllBookings_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getAllBookings_args args = new getAllBookings_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getAllBookings_result result = new getAllBookings_result();
        result.Success = iface_.getAllBookings();
        oprot.WriteMessageBegin(new TMessage("getAllBookings", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class login_args : TBase
    {
      private Domain.Employee _employee;
      private Domain.EndPoint _endpoint;

      public Domain.Employee Employee
      {
        get
        {
          return _employee;
        }
        set
        {
          __isset.employee = true;
          this._employee = value;
        }
      }

      public Domain.EndPoint Endpoint
      {
        get
        {
          return _endpoint;
        }
        set
        {
          __isset.endpoint = true;
          this._endpoint = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool employee;
        public bool endpoint;
      }

      public login_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Employee = new Domain.Employee();
                  Employee.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Endpoint = new Domain.EndPoint();
                  Endpoint.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("login_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Employee != null && __isset.employee) {
            field.Name = "employee";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Employee.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (Endpoint != null && __isset.endpoint) {
            field.Name = "endpoint";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Endpoint.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("login_args(");
        bool __first = true;
        if (Employee != null && __isset.employee) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Employee: ");
          __sb.Append(Employee== null ? "<null>" : Employee.ToString());
        }
        if (Endpoint != null && __isset.endpoint) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Endpoint: ");
          __sb.Append(Endpoint== null ? "<null>" : Endpoint.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class login_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public login_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("login_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("login_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAllRides_args : TBase
    {

      public getAllRides_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getAllRides_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getAllRides_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAllRides_result : TBase
    {
      private List<Domain.Ride> _success;

      public List<Domain.Ride> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getAllRides_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<Domain.Ride>();
                    TList _list4 = iprot.ReadListBegin();
                    for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                    {
                      Domain.Ride _elem6;
                      _elem6 = new Domain.Ride();
                      _elem6.Read(iprot);
                      Success.Add(_elem6);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getAllRides_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (Domain.Ride _iter7 in Success)
                {
                  _iter7.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getAllRides_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getCustomRides_args : TBase
    {
      private string _destination;
      private string _date;
      private string _hour;

      public string Destination
      {
        get
        {
          return _destination;
        }
        set
        {
          __isset.destination = true;
          this._destination = value;
        }
      }

      public string Date
      {
        get
        {
          return _date;
        }
        set
        {
          __isset.date = true;
          this._date = value;
        }
      }

      public string Hour
      {
        get
        {
          return _hour;
        }
        set
        {
          __isset.hour = true;
          this._hour = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool destination;
        public bool date;
        public bool hour;
      }

      public getCustomRides_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Destination = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Date = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Hour = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getCustomRides_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Destination != null && __isset.destination) {
            field.Name = "destination";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Destination);
            oprot.WriteFieldEnd();
          }
          if (Date != null && __isset.date) {
            field.Name = "date";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Date);
            oprot.WriteFieldEnd();
          }
          if (Hour != null && __isset.hour) {
            field.Name = "hour";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Hour);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getCustomRides_args(");
        bool __first = true;
        if (Destination != null && __isset.destination) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Destination: ");
          __sb.Append(Destination);
        }
        if (Date != null && __isset.date) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Date: ");
          __sb.Append(Date);
        }
        if (Hour != null && __isset.hour) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Hour: ");
          __sb.Append(Hour);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getCustomRides_result : TBase
    {
      private List<Domain.Ride> _success;

      public List<Domain.Ride> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getCustomRides_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<Domain.Ride>();
                    TList _list8 = iprot.ReadListBegin();
                    for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                    {
                      Domain.Ride _elem10;
                      _elem10 = new Domain.Ride();
                      _elem10.Read(iprot);
                      Success.Add(_elem10);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getCustomRides_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (Domain.Ride _iter11 in Success)
                {
                  _iter11.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getCustomRides_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAllPersons_args : TBase
    {

      public getAllPersons_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getAllPersons_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getAllPersons_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAllPersons_result : TBase
    {
      private List<Domain.Person> _success;

      public List<Domain.Person> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getAllPersons_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<Domain.Person>();
                    TList _list12 = iprot.ReadListBegin();
                    for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                    {
                      Domain.Person _elem14;
                      _elem14 = new Domain.Person();
                      _elem14.Read(iprot);
                      Success.Add(_elem14);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getAllPersons_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (Domain.Person _iter15 in Success)
                {
                  _iter15.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getAllPersons_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addBooking_args : TBase
    {
      private Domain.Ride _ride;
      private Domain.Booking _booking;
      private Domain.Employee _employee;
      private Domain.Person _person;

      public Domain.Ride Ride
      {
        get
        {
          return _ride;
        }
        set
        {
          __isset.ride = true;
          this._ride = value;
        }
      }

      public Domain.Booking Booking
      {
        get
        {
          return _booking;
        }
        set
        {
          __isset.booking = true;
          this._booking = value;
        }
      }

      public Domain.Employee Employee
      {
        get
        {
          return _employee;
        }
        set
        {
          __isset.employee = true;
          this._employee = value;
        }
      }

      public Domain.Person Person
      {
        get
        {
          return _person;
        }
        set
        {
          __isset.person = true;
          this._person = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ride;
        public bool booking;
        public bool employee;
        public bool person;
      }

      public addBooking_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Ride = new Domain.Ride();
                  Ride.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Booking = new Domain.Booking();
                  Booking.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Struct) {
                  Employee = new Domain.Employee();
                  Employee.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.Struct) {
                  Person = new Domain.Person();
                  Person.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("addBooking_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Ride != null && __isset.ride) {
            field.Name = "ride";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ride.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (Booking != null && __isset.booking) {
            field.Name = "booking";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Booking.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (Employee != null && __isset.employee) {
            field.Name = "employee";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            Employee.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (Person != null && __isset.person) {
            field.Name = "person";
            field.Type = TType.Struct;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            Person.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("addBooking_args(");
        bool __first = true;
        if (Ride != null && __isset.ride) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ride: ");
          __sb.Append(Ride== null ? "<null>" : Ride.ToString());
        }
        if (Booking != null && __isset.booking) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Booking: ");
          __sb.Append(Booking== null ? "<null>" : Booking.ToString());
        }
        if (Employee != null && __isset.employee) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Employee: ");
          __sb.Append(Employee== null ? "<null>" : Employee.ToString());
        }
        if (Person != null && __isset.person) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Person: ");
          __sb.Append(Person== null ? "<null>" : Person.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addBooking_result : TBase
    {
      private List<Domain.Ride> _success;

      public List<Domain.Ride> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public addBooking_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<Domain.Ride>();
                    TList _list16 = iprot.ReadListBegin();
                    for( int _i17 = 0; _i17 < _list16.Count; ++_i17)
                    {
                      Domain.Ride _elem18;
                      _elem18 = new Domain.Ride();
                      _elem18.Read(iprot);
                      Success.Add(_elem18);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("addBooking_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (Domain.Ride _iter19 in Success)
                {
                  _iter19.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("addBooking_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class logout_args : TBase
    {
      private Domain.Employee _employee;

      public Domain.Employee Employee
      {
        get
        {
          return _employee;
        }
        set
        {
          __isset.employee = true;
          this._employee = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool employee;
      }

      public logout_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Employee = new Domain.Employee();
                  Employee.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("logout_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Employee != null && __isset.employee) {
            field.Name = "employee";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Employee.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("logout_args(");
        bool __first = true;
        if (Employee != null && __isset.employee) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Employee: ");
          __sb.Append(Employee== null ? "<null>" : Employee.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class logout_result : TBase
    {

      public logout_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("logout_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("logout_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAllBookings_args : TBase
    {

      public getAllBookings_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getAllBookings_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getAllBookings_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAllBookings_result : TBase
    {
      private List<Domain.Booking> _success;

      public List<Domain.Booking> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getAllBookings_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<Domain.Booking>();
                    TList _list20 = iprot.ReadListBegin();
                    for( int _i21 = 0; _i21 < _list20.Count; ++_i21)
                    {
                      Domain.Booking _elem22;
                      _elem22 = new Domain.Booking();
                      _elem22.Read(iprot);
                      Success.Add(_elem22);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getAllBookings_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (Domain.Booking _iter23 in Success)
                {
                  _iter23.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getAllBookings_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
