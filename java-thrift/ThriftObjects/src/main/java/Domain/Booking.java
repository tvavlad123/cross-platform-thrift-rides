/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package Domain;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-05-05")
public class Booking implements org.apache.thrift.TBase<Booking, Booking._Fields>, java.io.Serializable, Cloneable, Comparable<Booking> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Booking");

  private static final org.apache.thrift.protocol.TField BOOKING_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bookingID", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PERSON_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("personID", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField RIDE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rideID", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SEAT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("seatNo", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new BookingStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new BookingTupleSchemeFactory();

  public int bookingID; // required
  public int personID; // required
  public int rideID; // required
  public int seatNo; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BOOKING_ID((short)1, "bookingID"),
    PERSON_ID((short)2, "personID"),
    RIDE_ID((short)3, "rideID"),
    SEAT_NO((short)4, "seatNo");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BOOKING_ID
          return BOOKING_ID;
        case 2: // PERSON_ID
          return PERSON_ID;
        case 3: // RIDE_ID
          return RIDE_ID;
        case 4: // SEAT_NO
          return SEAT_NO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BOOKINGID_ISSET_ID = 0;
  private static final int __PERSONID_ISSET_ID = 1;
  private static final int __RIDEID_ISSET_ID = 2;
  private static final int __SEATNO_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BOOKING_ID, new org.apache.thrift.meta_data.FieldMetaData("bookingID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PERSON_ID, new org.apache.thrift.meta_data.FieldMetaData("personID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RIDE_ID, new org.apache.thrift.meta_data.FieldMetaData("rideID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SEAT_NO, new org.apache.thrift.meta_data.FieldMetaData("seatNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Booking.class, metaDataMap);
  }

  public Booking() {
  }

  public Booking(
    int bookingID,
    int personID,
    int rideID,
    int seatNo)
  {
    this();
    this.bookingID = bookingID;
    setBookingIDIsSet(true);
    this.personID = personID;
    setPersonIDIsSet(true);
    this.rideID = rideID;
    setRideIDIsSet(true);
    this.seatNo = seatNo;
    setSeatNoIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Booking(Booking other) {
    __isset_bitfield = other.__isset_bitfield;
    this.bookingID = other.bookingID;
    this.personID = other.personID;
    this.rideID = other.rideID;
    this.seatNo = other.seatNo;
  }

  public Booking deepCopy() {
    return new Booking(this);
  }

  @Override
  public void clear() {
    setBookingIDIsSet(false);
    this.bookingID = 0;
    setPersonIDIsSet(false);
    this.personID = 0;
    setRideIDIsSet(false);
    this.rideID = 0;
    setSeatNoIsSet(false);
    this.seatNo = 0;
  }

  public int getBookingID() {
    return this.bookingID;
  }

  public Booking setBookingID(int bookingID) {
    this.bookingID = bookingID;
    setBookingIDIsSet(true);
    return this;
  }

  public void unsetBookingID() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BOOKINGID_ISSET_ID);
  }

  /** Returns true if field bookingID is set (has been assigned a value) and false otherwise */
  public boolean isSetBookingID() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BOOKINGID_ISSET_ID);
  }

  public void setBookingIDIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BOOKINGID_ISSET_ID, value);
  }

  public int getPersonID() {
    return this.personID;
  }

  public Booking setPersonID(int personID) {
    this.personID = personID;
    setPersonIDIsSet(true);
    return this;
  }

  public void unsetPersonID() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PERSONID_ISSET_ID);
  }

  /** Returns true if field personID is set (has been assigned a value) and false otherwise */
  public boolean isSetPersonID() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PERSONID_ISSET_ID);
  }

  public void setPersonIDIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PERSONID_ISSET_ID, value);
  }

  public int getRideID() {
    return this.rideID;
  }

  public Booking setRideID(int rideID) {
    this.rideID = rideID;
    setRideIDIsSet(true);
    return this;
  }

  public void unsetRideID() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RIDEID_ISSET_ID);
  }

  /** Returns true if field rideID is set (has been assigned a value) and false otherwise */
  public boolean isSetRideID() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RIDEID_ISSET_ID);
  }

  public void setRideIDIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RIDEID_ISSET_ID, value);
  }

  public int getSeatNo() {
    return this.seatNo;
  }

  public Booking setSeatNo(int seatNo) {
    this.seatNo = seatNo;
    setSeatNoIsSet(true);
    return this;
  }

  public void unsetSeatNo() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SEATNO_ISSET_ID);
  }

  /** Returns true if field seatNo is set (has been assigned a value) and false otherwise */
  public boolean isSetSeatNo() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SEATNO_ISSET_ID);
  }

  public void setSeatNoIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SEATNO_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case BOOKING_ID:
      if (value == null) {
        unsetBookingID();
      } else {
        setBookingID((java.lang.Integer)value);
      }
      break;

    case PERSON_ID:
      if (value == null) {
        unsetPersonID();
      } else {
        setPersonID((java.lang.Integer)value);
      }
      break;

    case RIDE_ID:
      if (value == null) {
        unsetRideID();
      } else {
        setRideID((java.lang.Integer)value);
      }
      break;

    case SEAT_NO:
      if (value == null) {
        unsetSeatNo();
      } else {
        setSeatNo((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case BOOKING_ID:
      return getBookingID();

    case PERSON_ID:
      return getPersonID();

    case RIDE_ID:
      return getRideID();

    case SEAT_NO:
      return getSeatNo();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case BOOKING_ID:
      return isSetBookingID();
    case PERSON_ID:
      return isSetPersonID();
    case RIDE_ID:
      return isSetRideID();
    case SEAT_NO:
      return isSetSeatNo();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Booking)
      return this.equals((Booking)that);
    return false;
  }

  public boolean equals(Booking that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_bookingID = true;
    boolean that_present_bookingID = true;
    if (this_present_bookingID || that_present_bookingID) {
      if (!(this_present_bookingID && that_present_bookingID))
        return false;
      if (this.bookingID != that.bookingID)
        return false;
    }

    boolean this_present_personID = true;
    boolean that_present_personID = true;
    if (this_present_personID || that_present_personID) {
      if (!(this_present_personID && that_present_personID))
        return false;
      if (this.personID != that.personID)
        return false;
    }

    boolean this_present_rideID = true;
    boolean that_present_rideID = true;
    if (this_present_rideID || that_present_rideID) {
      if (!(this_present_rideID && that_present_rideID))
        return false;
      if (this.rideID != that.rideID)
        return false;
    }

    boolean this_present_seatNo = true;
    boolean that_present_seatNo = true;
    if (this_present_seatNo || that_present_seatNo) {
      if (!(this_present_seatNo && that_present_seatNo))
        return false;
      if (this.seatNo != that.seatNo)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + bookingID;

    hashCode = hashCode * 8191 + personID;

    hashCode = hashCode * 8191 + rideID;

    hashCode = hashCode * 8191 + seatNo;

    return hashCode;
  }

  @Override
  public int compareTo(Booking other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetBookingID()).compareTo(other.isSetBookingID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBookingID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bookingID, other.bookingID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPersonID()).compareTo(other.isSetPersonID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPersonID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.personID, other.personID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRideID()).compareTo(other.isSetRideID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRideID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rideID, other.rideID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSeatNo()).compareTo(other.isSetSeatNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeatNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seatNo, other.seatNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Booking(");
    boolean first = true;

    sb.append("bookingID:");
    sb.append(this.bookingID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("personID:");
    sb.append(this.personID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rideID:");
    sb.append(this.rideID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("seatNo:");
    sb.append(this.seatNo);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BookingStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BookingStandardScheme getScheme() {
      return new BookingStandardScheme();
    }
  }

  private static class BookingStandardScheme extends org.apache.thrift.scheme.StandardScheme<Booking> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Booking struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BOOKING_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bookingID = iprot.readI32();
              struct.setBookingIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PERSON_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.personID = iprot.readI32();
              struct.setPersonIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RIDE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rideID = iprot.readI32();
              struct.setRideIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SEAT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.seatNo = iprot.readI32();
              struct.setSeatNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Booking struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BOOKING_ID_FIELD_DESC);
      oprot.writeI32(struct.bookingID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PERSON_ID_FIELD_DESC);
      oprot.writeI32(struct.personID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RIDE_ID_FIELD_DESC);
      oprot.writeI32(struct.rideID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SEAT_NO_FIELD_DESC);
      oprot.writeI32(struct.seatNo);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BookingTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BookingTupleScheme getScheme() {
      return new BookingTupleScheme();
    }
  }

  private static class BookingTupleScheme extends org.apache.thrift.scheme.TupleScheme<Booking> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Booking struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetBookingID()) {
        optionals.set(0);
      }
      if (struct.isSetPersonID()) {
        optionals.set(1);
      }
      if (struct.isSetRideID()) {
        optionals.set(2);
      }
      if (struct.isSetSeatNo()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetBookingID()) {
        oprot.writeI32(struct.bookingID);
      }
      if (struct.isSetPersonID()) {
        oprot.writeI32(struct.personID);
      }
      if (struct.isSetRideID()) {
        oprot.writeI32(struct.rideID);
      }
      if (struct.isSetSeatNo()) {
        oprot.writeI32(struct.seatNo);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Booking struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.bookingID = iprot.readI32();
        struct.setBookingIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.personID = iprot.readI32();
        struct.setPersonIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.rideID = iprot.readI32();
        struct.setRideIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.seatNo = iprot.readI32();
        struct.setSeatNoIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

